Indoor Outdoor detection. 
========================================
Train on a Galaxy Nexus, and test on a Nexus One and Galaxy Nexus.
------------------------------------------------------------------------- 
anirudh@Sim-Box:~/cita/activity-detection/src$ python train-classifier.py ~/cita/io-detector/IO-Data/io-data-Dec3/Accel-dummy ~/cita/io-detector/IO-Data/io-data-Dec3/Wifi-Lenin ~/cita/io-detector/IO-Data/io-data-Dec3/GPS-dummy ~/cita/io-detector/IO-Data/io-data-Dec3/GSM-Lenin ~/cita/io-detector/IO-Data/io-data-Dec3/NwkLoc-dummy ../hardware-models/sensation/power.py 2&>1 classifier.model

Older Scheme : Inverted scheme that gave best results at lowest sampling rate (written below)
*******************************************************************************
Results :
Test on GalaxyNexus Set 2 : 83% 
Test on GalaxyNexus Set 1 : 86 %
Test on NexusOne Set 1 : 80 %
Test on NexusOne Set 2 : 78%

New Scheme that achieves more sane energy numbers(as in the higher sampling rate achieves higher accuracy) : ( The commit after 4b8a4810792f29934ab4ca52c85d2c77e3e453f7)
************************************************************************************************************
Results :
Test on GalaxyNexus Set 2 : 88% 
Test on GalaxyNexus Set 1 : 91 %
Test on NexusOne Set 1 : 79 %
Test on NexusOne Set 2 : 78%

Callback adaptive scheme :
=================================================
Callback 1 : 75 % and 1399 Joules
Callback 2 : 57% and 266 Joules
Callback on 1,2 : 77 % and 1588 Joules
Not quite there yet. 

Callback adaptive scheme on 3 hour stitched trace of the same phone (but not the same as the training data): 
================================================================================================
Here's how we generated the templates and stitched : ./split-and-stitch.sh ~/cita/io-detector/IO-Data/io-data-Dec6/GalaxyNexus/ 10800000 2
Callback 1 : 88% and 1499 Joules
Callback 2:  85% and 1649 Joules 
Callback 1,2: 97% and 3118 Joules

Here are averages across 10 runs :
======================================================
Train using : anirudh@Sim-Box:~/cita/activity-detection/src$ python train-classifier.py ~/cita/io-detector/IO-Data/io-data-Dec3/Accel-dummy ~/cita/io-detector/IO-Data/io-data-Dec3/Wifi-Lenin ~/cita/io-detector/IO-Data/io-data-Dec3/GPS-dummy ~/cita/io-detector/IO-Data/io-data-Dec3/GSM-Lenin ~/cita/io-detector/IO-Data/io-data-Dec3/NwkLoc-dummy ../hardware-model/sensation/power.py 2&>1 classifier.model

Test using :  ./split-and-stitch.sh ~/cita/io-detector/IO-Data/io-data-Dec6/GalaxyNexus/ 10800000 2

Callback 1 87.6 % 1569.7 Joules
Callback 2 82%  1403 Joules
Callback 1,2 : 96 % 3118 Joules

Ramp up at 0.2, no ramp down.

=========================================
Ramp down even with an up water mark of 0.99 seems to lower the energy consumption, but kills accuracy as well. So I decided to ditch ramp down altogether. As for ramp up, here are results with a lower threshold of 0.1 and 0.2 respectively. 

anirudh@Sim-Box:~/cita/activity-detection/src/results$ cat io-detector-0.1.txt | sed 's/\[1, 2\]/\[1,2\]/g' |  python print_stats.py 
[1,2] 	 96.3 0.5 3118  0 
[1] 	 87.0 1.3 1610  103 
[2] 	 83.4 1.3 1463  99 
anirudh@Sim-Box:~/cita/activity-detection/src/results$ cat io-detector-0.2.txt | sed 's/\[1, 2\]/\[1,2\]/g' |  python print_stats.py 
[1,2] 	 96.3 0.5 3118  0 
[1] 	 87.7 1.1 1570  110 
[2] 	 82.7 1.4 1404  92 

===============================================
Truncate power by removing the top most entry of the sampling rate table. 
anirudh@Sim-Box:~/cita/activity-detection/src/results$ cat io-detector-0.01-trunc-power.txt | sed 's/\[1, 2\]/\[1,2\]/g' |  python print_stats.py 
[1,2] 	 95.0 0.5 1751  0 
[1] 	 86.2 0.7 1125  44 
[2] 	 85.4 0.9 1085  39 

====================================
Final set of results for the paper, using the correct phone model (i.e. the Galaxy Nexus Phone model instead of sensation)
[1,2] 	 96.3 0.5 4796  0 
[1] 	 87.7 1.1 2487  161 
[2] 	 82.7 1.4 2240  135
